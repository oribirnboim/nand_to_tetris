// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    

    PARTS:
	Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=Areginput);
    Not(in=instruction[15], out=notinst15);
    Or(a=instruction[5], b=notinst15, out=aregload);
    ARegister(in=Areginput, load=aregload, out=Areg);
    sixteenbitstofifteen(in=Areg, out=Aregfifteen, out=addressM);
    

    Mux16(a=Areg, b=inM, sel=instruction[12], out=ALUsecondinput);

    And(a=instruction[4], b=instruction[15], out=isdwrite);
    DRegister(in=ALUoutput, load=isdwrite, out=Dreg);

    ALU(x=Dreg, y=ALUsecondinput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=zr, ng=ng);

    Not(in=instruction[0], out=notinzero);
    Xor(a=instruction[0], b=notinzero, out=one);

    And(a=instruction[3], b=instruction[15], out=writeM);

    // creating the pc load input
    Not(in=ng, out=notneg);
    Not(in=zr, out=notzer);
    And(a=notneg, b=notzer, out=pos);
    And(a=instruction[0], b=pos, out=JP);
    And(a=instruction[1], b=zr, out=JZR);
    And(a=instruction[2], b=ng, out=JNG);

    Or(a=JP, b=JZR, out=Tempjmp);
    Or(a=Tempjmp, b=JNG, out=isJumptemp);
    And(a=isJumptemp, b=instruction[15], out=isJump);

    PC(in=Areg, load=isJump, inc=one, reset=reset, out=PC16);
    sixteenbitstofifteen(in=PC16,out=pc);


    

}