// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    Not(in=instruction[15], out=Notinstruction0);
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=AdressMux); // takes care of the A register
    And(a=instruction[5], b=instruction[15], out=CinstructionisAchanged);
    Or(a=Notinstruction0, b=CinstructionisAchanged, out=isAchanged);
    Register(in=AdressMux, load=isAchanged, out=Areg);

    And(a=instruction[15], b=instruction[4], out=isDchanged); // takes care of D register 
    DRegister(in=ALUout, load=isDchanged, out=D);

    Mux16(a=Areg, b=inM, sel=instruction[12], out=MorA); // takes care of a cb

    ALU(x=D, y=MorA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zr, ng=ng);

    And(a=zr,b=instruction[1],out=zrj); // checks conditions for jump
    And(a=ng,b=instruction[2],out=ngj);
    Not(in=ng, out=pos);
    And(a=pos,b=instruction[0],out=posj);
    Or(a=zrj, b=ngj, out=zrngj);
    Or(a=zrngj, b=posj, out=jc);
    And(a=jc, b=instruction[15], out=j);

    Not16(in=instruction, out=Notinstruction);  // takes care of PC register
    And16(a=instruction, b=Notinstruction, out=zero);
    Mux16(a=Areg, b=zero, sel=reset, out=PCinputtemp);
    
    Xnor(a=instruction[0],b=instruction[0],out=one1bit);
    Not(in = j,out = nj);
    PC(in=PCinputtemp, load=j, inc=nj, reset=reset, out=PCval);

    Id16(in=ALUout,out=outM); // takes care of outputs
    Id16to15(in=Areg,out=addressM);
    Id16to15(in=PCval,out=pc);
    And(a=instruction[3], b=instruction[15], out=writeM);


}