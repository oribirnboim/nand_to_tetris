// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.



CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ShiftLeft(in=x,out=xls);
     ShiftRight(in=x,out=xrs);
     ShiftLeft(in=y,out=yls);
     ShiftRight(in=y,out=yrs);

     Mux16(a=xrs, b=xls, sel=instruction[5], out=xshifted);
     Mux16(a=yrs, b=yls, sel=instruction[5], out=yshifted);
     
     And(a=instruction[8], b=instruction[7], out=instruction8and7);
     Not(in=instruction8and7, out=Notinstruction8);
     Not(in=instruction[4],out=Notinstruction4);

     And(a=instruction[4], b=Notinstruction8, out=Isshiftx);
     And(a=Notinstruction4,b=Notinstruction8,out=Isshifty);

     Mux16(a=x, b=xshifted, sel=Isshiftx, out=xmaybeshifted);
     Mux16(a=y, b=yshifted, sel=Isshifty, out=ymaybeshifted);

     ALU(x=xmaybeshifted, y=ymaybeshifted, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=out, zr=zr, ng=ng);
     
     }
