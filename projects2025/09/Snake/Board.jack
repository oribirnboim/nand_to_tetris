


class Board {
  field String text;
  field int textI;
  field int textJ;
  field int textLength;
  field String score;
  field int scoreI;
  field int scoreJ;
  field Array squares;
  field int numSquares;
  field int topX;
  field int topY;
  field int squareSize;
  field int borderWidth;

  constructor Board new(){
    var Array row;
    var Square square;
    var int i;
    var int j;
    let numSquares = 12; // in each row
    let squareSize = 16;
    let squares = Array.new(numSquares);
    let borderWidth = 4;
    let topX = 20;
    let topY = 20;
    let textI = 5;
    let textJ = 35;
    let scoreI = 10;
    let scoreJ = 45;
    let textLength = 20;
    do printBoard();
    let i = 0;
    while (i < numSquares){
      let row = Array.new(numSquares);
      let j = 0;
      while (j < numSquares){
        let row[j] = Square.new(topX + Math.multiply(j, squareSize), topY + Math.multiply(i, squareSize), i, j, 0, squareSize);
        let j = j+1;
      }
      let squares[i] = row;
      let i = i+1;
    }
    return this;
  }

  method Array getSquares(){
    return squares;
  }

  method void displayScore(int score){
    return;
  }

  method void displayText(String text){
    return;
  }

  method void drawOpening(){
    do Output.printString("opening");
    do Output.println();
    return;
  }

  method Square getSquare(int i, int j){
    var Array row;
    let row = squares[i];
    return row[j];
  }

  method int getNumSquares(){
    return numSquares;
  }

  method void clearText(){
    var int loopCounter;
    do Output.moveCursor(textI, textJ);
    let loopCounter = 0;
    while (loopCounter < textLength){
      do Output.printChar(32);
      let loopCounter = loopCounter + 1;
    }
    do Output.moveCursor(textI, textJ);
    return;
  }

  method void writeText(String s){
    let text = s;
    do clearText();
    if (s.length() > textLength){
      do Output.printString("err");
    }
    else {
      do Output.printString(s);
    }
    return;
  }

  method void clearScore(){
    do Output.moveCursor(scoreI, scoreJ);
    do Output.printChar(32);
    do Output.printChar(32);
    do Output.printChar(32);
    do Output.moveCursor(scoreI, scoreJ);
    return;
  }

    method void writeScore(int n){
    let score = n;
    do clearScore();
    do Output.printInt(n);
    return;
  }

  method void incScore(int n){
    do writeScore(n);
    return;
  }

  method void printBoard(){
    var int xTop;
    var int yTop;
    var int xBottom;
    var int yBottom;
    do Screen.clearScreen();
    do writeText("a");
    do writeScore(1);
    do Screen.setColor(true);
    let xTop = topX - borderWidth;
    let yTop = topY - borderWidth;
    let xBottom = topX + (numSquares * squareSize) + borderWidth;
    let yBottom = topY + (numSquares * squareSize) + borderWidth;
    do Screen.drawRectangle(xTop, yTop, xBottom, yBottom);
    do Screen.setColor(false);
    let xTop = topX;
    let yTop = topY;
    let xBottom = topX + (numSquares * squareSize);
    let yBottom = topY + (numSquares * squareSize);
    do Screen.drawRectangle(xTop, yTop, xBottom, yBottom);
    return;
  }
}