// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array powersOfTwo;

        function void init() {
        var int i;
        let powersOfTwo = Array.new(16);
        let i = 0;
        while (i < 16) {
        let powersOfTwo[i] = Math.twoToThePowerOf(i);
        let i = i + 1;
        }
        return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
        if (x > 0) { return x;}
        else   { return ~x + 1;}
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum, shiftedx, i, k, ithBit;
            
            let sum = 0;
            let shiftedx = x;
            let i = 0;
            while (i < 16){
            let ithBit = powersOfTwo[i] & y;
            if (ithBit) { let sum = sum + shiftedx;}
            let shiftedx = ^shiftedx;
            let i = i + 1;
            }
        return sum;
        }

        function int twoToThePowerOf(int i){
            var int result, k;
            let k = 0;
            let result = 1;
            while (k < i) {let result = ^result; let k = k + 1;}
            return result;
        }


        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int dividePos(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q, temp, posResult;

            if (y > x) {
                return 0;
            }

            let q = Math.dividePos(x, ^y);
            let temp = ^q;
            if ((x - (temp * y)) < y) {
                let posResult = temp;
            } else {
                let posResult = temp + 1;
            }

            return posResult;
            }   

        function int divide(int X, int Y){
            var int x,y, posResult;
            var boolean isneg;
            let isneg = false;

            if (X>0) {let x=X;} else {let x = 1+(~X); let isneg = ~(isneg);}
            if (Y>0) {let y=Y;} else {let y = 1 + (~Y); let isneg = ~(isneg);}

            let posResult = Math.dividePos(x,y);
            if (isneg) {return 1+(~posResult);}
            else {return posResult;}
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int i, y;
            let y = 0;
            let i = 7;
            while (i + 1 > 0) {
            if (~(((y + powersOfTwo[i]) * (y + powersOfTwo[i])) - x> 0)) {let y = y + powersOfTwo[i];}
            let i = i - 1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
        if (a > b) {return a;}
        else       {return b;}
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
        if (a < b) {return a;}
        else       {return b;}
        }
}
