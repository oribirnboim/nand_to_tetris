// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static boolean color;

        /** Initializes the Screen. */
        function void init() {
            let color = true;
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var boolean prev_color;
            let prev_color = color;
            let color = false;
            do Screen.drawRectangle(0,0,511,255);
            let color = prev_color;
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int pixelRAMIndex;
            var int pixelValue;
            var int pixelBitIndex;
            var int i,k;
            let pixelRAMIndex = 16384 + (32 * y) + (x/16);
            let pixelValue = Memory.peek(pixelRAMIndex);
            let pixelBitIndex = x & 15;
            let k = 1;
            while (i < pixelBitIndex){
                let k = k + k;
                let i = i + 1;
            }
            if (color) {let pixelValue = pixelValue | k;}
            else {let pixelValue = pixelValue & (~k);}
            do Memory.poke(pixelRAMIndex, pixelValue);
            return;
        }   

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int start_pixel, end_pixel, remainder, startAddress,endAddress;
            var int x, y, a, b, diff, dx, dy, X, Y, i, differencePixels, bites;
            var int i;
            if (y1 = y2){
                if (x2 > x1) {let x = x1; let a = x2;}
                else         {let x = x2; let a = x1;}
                let y = y1;
                let startAddress = 16384 + (32 * y) + (x/16);
                let endAddress = 16384 + (32 * y) + (a/16);
                let differencePixels = a - x;

                if (startAddress = endAddress) {
                let i = 0;
                while (i < differencePixels) {do Screen.drawPixel(x + i,y); let i = i + 1;}
                return;
                }
                let remainder = 16 - (x & 15);
                let i = 0; while (i < remainder) { do Screen.drawPixel(x + i, y); let i = i + 1;}
                let remainder = a & 15 + 1;
                let i = 0; while (i < remainder) { do Screen.drawPixel(a - i, y); let i = i + 1;}

                let bites = endAddress - startAddress ;
                if (color) {let i = 1; while (i < bites) { do Memory.poke(startAddress + i, -1); let i = i + 1;}}
                else {let i = 1; while (i < bites) { do Memory.poke(startAddress + i, 0); let i = i + 1;}}
                return;

            }
            //now handles the case where y1 != y2.
            else{
                if (x2 > x1) {let x = x1;let X = x2;let y = y1; let Y = y2;} else {let x = x2; let X = x1;let y = y2; let Y = y1;}
                let a = 1;
                let b = 0;
                let dx = X - x;
                let dy = Y - y;
                let diff = 0;
                do Screen.drawPixel(x,y);
                if (dy > 0){
                    while ((a < (dx + 1)) | (b < (dy + 1))){
                        do Screen.drawPixel(x+a, y+b);
                        if (diff < 0) {let a = a + 1; let diff = diff + dy;}
                        else {let b = b + 1; let diff = diff - dx;}
                    }
                }
            
                else{
                    while ((a < (dx + 1)) | (b > (dy - 1))){
                        do Screen.drawPixel(x+a, y+b);
                        if (diff < 0) {let a = a + 1; let diff = diff - dy;}
                        else {let b = b - 1; let diff = diff - dx;}
                    }
                }
            }
            return;   
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle (int x1, int y1, int x2, int y2) {
            var int i, startY, endY;
            if (y2 > y1) {let startY = y1; let endY = y2;}
            else       {let startY = y2; let endY = y1;}
            let i = 0;
            while (i < (endY - startY)) {do Screen.drawLine(x1, startY + i, x2, startY + i); let i = i + 1;}
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy, halfWidth;
            let dy = -r;
            while (~(dy > r)){
            let halfWidth = Math.sqrt ((r*r)-(dy*dy));
            do Screen.drawLine(x - halfWidth, y + dy, x + halfWidth, y + dy);
            let dy = dy + 1;
            }
            return;
        }
}