// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
  static Array freeList;
  /** Initializes the class. */
  function void init() {
    // Pseudocode:
    // 1. freeList = heapBase
    // 2. freeList.length = heapLength
    // 3. freeList.next = null
    let freeList = 2048;
    do Memory.poke(freeList, 14336);
    do Memory.poke(freeList+1, null);
    return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
    var Array arr;
    let arr = address;
    return arr[0];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
    var Array arr;
    let arr = address;
    let arr[0] = value;
    return;
  }

  /** Finds an available RAM block of the given size and returns
    *  a reference to its base address. Assume size > 0. */
  function int alloc(int size) {
    // Pseudocode:
    // 1. Search freeList using best-fit or first-fit heuristics to obtain
    //    a segment with segment.length > size.
    //    If no such segment is found, return -1.
    // 2. block = needed part of the found segment (or all of it, if the 
    //            segment remainder is too small).
    // 3. block[-1] = size + 1 // Remember block size, for de-allocation
    // 4. Update freeList to reflect the allocation
    // 5. Return block
    // The figure MemoryTest/MemoryFreeListExample.png illustrates how
    // the freeList should look like.
    var Array current, next;
    var int curSize;
    let current = freeList;
    let next = current[1];

    //fist look at the fisrt block of freeList
    if (size<current[0]){ //if it is big enough
      if (current[0]-size<3){ //if there is no room for another free block
        let freeList = next;
        return current+1;
      } //if there is:
      let current[size+2]= current[1]; //fix remainder reference
      let current[size+1] = current[0] - size - 1;//fix remainder size
      let current[0] = size + 1; //fix allocated size
      let freeList = freeList + size + 1;//fix reference to remainder
      return current+1;
    }
    while (~(next=0)){
      if (size<next[0]){ //if it is big enough
        if (next[0]-size<3){ //if there is no room for another free block
          let current[1] = next[1];
          return next+1;
        } //if there is:
        let next[size+2] = next[1]; //fix remainder reference
        let next[size+1] = next[0] - size - 1; //fix remainder size
        let next[0] = size + 1; //fix allocated size
        let current[1] = current[1] + size + 1; //fix reference to remainder
        return next+1;
      } else { //if not big enough, advance
        let current = next;
        let next = Memory.peek(next+1);
      }
    }
    return -1;
  }

  /** De-allocates the given object (cast as an array) by making
    *  it available for future allocations. */
  function void deAlloc(Array o) {
    // Pseudocode:
    // 1. segment = o - 1
    // 2. Insert segment into the freeList
    var Array current, next;
    let current = freeList;
    let next = current[1];
    if (o < freeList){ //if o is before  the first block in freeList
      if ((o-1+o[-1]) = freeList){ //if adjacent to first block
        let o[-1] = o[-1] + freeList[0];
        let o[0] = freeList[1];
      }
      else{ //if not adjacent
        let o[0] = freeList;
      }
      let freeList = o-1;
      return;
    }
    while(~(next=0)){ //o is between current, next
      if ((o>current)&(o<next)){
        if ((current + current[0])=(o-1)){ //if adjacent to current
          if ((o-1+o[-1]) = next){ //if adjacent to next (to both)
            let current[0] = current[0] + o[-1] + next[0];
            let current[1] = next[1];
          } else {
            let current[0] = current[0] + o[-1];
          }
        } else { //if not adjacent to current
          if ((o-1+o[-1]) = next){ //if adjacent to next
            let o[-1] = o[-1] + next[0];
            let o[0] = next[1];
            let current[1] = o - 1;
          } else { //adjacent to none
            let current[1] = o-1;
            let o[0] = next;
          }
        }
        return;    
      } else {
        let current = next;
        let next = next[1];
      }
    }
    // now o has to be after the last block in freeList:
    if ((current + current[0])=(o-1)){ //if adjacent to last block
      let current[0] = current[0] + o[-1];
    }
    else{ //if not adjacent
      let current[1] = o-1;
      let o[0] = 0;
    }
    return;
  }    

  /** Returns the maximal element contained in the given Array/object. 
    *  Assume inputs are initialized and contain at least one element. */
  function int max(Array o) {
    // Hint: the algorithm you need to implement in Memory.alloc saves the
    // size of the allocated block in the memory cell right before the 
    // start of the block, and this can be used to implement Memory.max.
    var int size;
    var int counter;
    var int res, current;
    let size = o[-1]-1;
    let counter = 1;
    let res = o[0];
    while (counter<size){
      let current = o[counter];
      if (current>res){
        let res = current;
      }
      let counter = counter + 1;
    }
    return res;
  }
}
